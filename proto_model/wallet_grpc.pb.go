// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wallet.proto

package test_cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletServicesClient is the client API for WalletServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServicesClient interface {
	Deposit(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (*Wallet, error)
	Details(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Detail, error)
}

type walletServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServicesClient(cc grpc.ClientConnInterface) WalletServicesClient {
	return &walletServicesClient{cc}
}

func (c *walletServicesClient) Deposit(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/WalletServices/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesClient) Details(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Detail, error) {
	out := new(Detail)
	err := c.cc.Invoke(ctx, "/WalletServices/Details", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServicesServer is the server API for WalletServices service.
// All implementations must embed UnimplementedWalletServicesServer
// for forward compatibility
type WalletServicesServer interface {
	Deposit(context.Context, *Wallet) (*Wallet, error)
	Details(context.Context, *WalletId) (*Detail, error)
	mustEmbedUnimplementedWalletServicesServer()
}

// UnimplementedWalletServicesServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServicesServer struct {
}

func (UnimplementedWalletServicesServer) Deposit(context.Context, *Wallet) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedWalletServicesServer) Details(context.Context, *WalletId) (*Detail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Details not implemented")
}
func (UnimplementedWalletServicesServer) mustEmbedUnimplementedWalletServicesServer() {}

// UnsafeWalletServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServicesServer will
// result in compilation errors.
type UnsafeWalletServicesServer interface {
	mustEmbedUnimplementedWalletServicesServer()
}

func RegisterWalletServicesServer(s grpc.ServiceRegistrar, srv WalletServicesServer) {
	s.RegisterService(&WalletServices_ServiceDesc, srv)
}

func _WalletServices_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletServices/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesServer).Deposit(ctx, req.(*Wallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServices_Details_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesServer).Details(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletServices/Details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesServer).Details(ctx, req.(*WalletId))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletServices_ServiceDesc is the grpc.ServiceDesc for WalletServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WalletServices",
	HandlerType: (*WalletServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposit",
			Handler:    _WalletServices_Deposit_Handler,
		},
		{
			MethodName: "Details",
			Handler:    _WalletServices_Details_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
